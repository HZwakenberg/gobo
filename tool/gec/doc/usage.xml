<?xml version="1.0"?> 

<!--
	description:

		"Using gec"

	tool: "Gobo Eiffel Compiler"
	copyright: "Copyright (c) 2006-2025, Eric Bezault and others"
	license: "MIT License"
-->

<chapter xmlns="https://www.gobosoft.com/eiffel/gobo/documentation" id="gec/usage">
<chapterinfo>
	<copyright>
		<year>2006-2025</year>
		<holder>Eric Bezault</holder>
	</copyright>
	<author>
		<firstname>Eric</firstname><surname>Bezault</surname>
	</author>
	<email>ericb@gobosoft.com</email>
	<date>31 August 2025</date>
</chapterinfo>

<title>Using gec</title>

<section><title>Command-line options</title>
<para>
The usual way to invoke <projectname>gec</projectname> is as follows:
<blockquote>
	<filename>gec ecf_filename</filename>
</blockquote>
This will read the description of your program in the ECF file
<filename>ecf_filename</filename>, compile it and invoke the
back-end C compiler on the generated C code as explained
below. 
</para>
<para>
For simple programs, one can just provide the Eiffel file containing
the root class: 
<blockquote>
	<filename>gec eiffel_filename</filename>
</blockquote>
Here is the list of options that can be
used with <projectname>gec</projectname>:
<variablelist>
	<varlistentry>
		<term>
			<filename>-h</filename>
		</term>
		<term>
			<filename>--help</filename>
		</term>
		<listitem><para>
			Print a summary of the command-line options of <projectname>gec</projectname> and exit.
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--target=&lt;target_name&gt;</filename>
		</term>
		<listitem><para>
			Name of target to be used in ECF file.
			(default: last target in ECF file)
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--finalize</filename>
		</term>
		<listitem><para>
			Compile with optimizations turned on.
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--gelint</filename>
		</term>
		<listitem><para>
			Run gelint on the full content of each class being compiled.
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--ise=major[.minor[.revision[.build]]]</filename>
		</term>
		<listitem><para>
			Version of ISE Eiffel whose semantics should be used during compilation.
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--catcall=&lt;no|error|warning&gt;</filename>
		</term>
		<listitem><para>
			Should CAT-call errors be considered as fatal errors, as warnings, or just ignored? 
			(default: no)
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--split=&lt;no|yes&gt;</filename>
		</term>
		<listitem><para>
			Should generated C code be split over several C files instead of being held in a single possibly large C file? 
			(default: yes)
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--split-size=&lt;size&gt;</filename>
		</term>
		<listitem><para>
			Size (in bytes) of generated C files in bytes when in split mode.
			(default: 2,500,000)
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--cc=&lt;no|script|gecc&gt;</filename>
		</term>
		<listitem><para>
			Should the back-end C compiler be invoked on the generated C code, and if yes with what method?
			Use `gecc` to allow the generated C code to be compiled using multiple threads.
			(default: gecc)
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--new-instance-types=&lt;filename&gt;</filename>
		</term>
		<listitem><para>
			File containing the list of types which can have instances created 
			by 'TYPE.new_instance' or 'TYPE.new_special_any_instance'.
			(default: use all non-deferred, non-NONE, alive types)
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--gc=&lt;no|boehm&gt;</filename>
		</term>
		<listitem><para>
			Which garbage collector should the application be compiled with?
			Note that the Boehm GC is included into the
			<projectname>Gobo Eiffel package</projectname>.
			(default: boehm if available, no otherwise)
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--setting=name=value</filename>
		</term>
		<listitem><para>
			Override settings defined in ECF file. This option can be used several
			times to override several settings.
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--capability=name=value</filename>
		</term>
		<listitem><para>
			Override capability usage defined in ECF file. This option can be used several
			times to override several capabilities.
		</para></listitem>
	</varlistentry>	
	<varlistentry>
		<term>
			<filename>--variable=NAME=VALUE</filename>
		</term>
		<listitem><para>
			Override variables defined in ECF file. This option can be used several
			times to override several variables.
		</para></listitem>
	</varlistentry>	
	<varlistentry>
		<term>
			<filename>--thread=&lt;thread_count&gt;</filename>
		</term>
		<listitem><para>
			Number of threads to be used to run <projectname>gec</projectname>.
			Negative numbers -N mean &quot;number of CPUs - N&quot;.
			(default: -3, aka &quot;max (number of CPUs -3, 1)&quot;)
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--silent</filename>
		</term>
		<listitem><para>
			Run <projectname>gec</projectname> in silent mode.
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--verbose</filename>
		</term>
		<listitem><para>
			Run <projectname>gec</projectname> in verbose mode.
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--no-benchmark</filename>
		</term>
		<listitem><para>
			Should no benchmark information be displayed?
			(default: display non-nested benchmark information)
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--nested-benchmark</filename>
		</term>
		<listitem><para>
			Should nested benchmark information be displayed?
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>--metrics</filename>
		</term>
		<listitem><para>
			Should metrics information be displayed?
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>-V</filename>
		</term>
		<term>
			<filename>--version</filename>
		</term>
		<listitem><para>
			Print the version number of <projectname>gec</projectname> and exit.
		</para></listitem>
	</varlistentry>
</variablelist>
</para>
</section>

<section><title>Environment variables</title>
<para>
It is possible to override some of the command-line options above, or
the default values for these options, using environment variables.
<variablelist>
	<varlistentry>
		<term>
			<filename>$GOBO_CLI_GC</filename>
		</term>
		<listitem><para>
			Override the command-line option <filename>--gc</filename>.
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>$GOBO_DEFAULT_GC</filename>
		</term>
		<listitem><para>
			Override the default value when the command-line option <filename>--gc</filename>
			has not been specified and the environment variable <filename>$GOBO_CLI_GC</filename>
			has not been set.
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>$GOBO_CLI_SETTING</filename>
		</term>
		<listitem><para>
			Override settings as if they were specified with the command-line
			option <filename>--setting</filename>, or override their values
			if they are also specified with the command-line option.
			Several settings can be specified in this environment variable,
			separated by a comma or a space.
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>$GOBO_DEFAULT_SETTING</filename>
		</term>
		<listitem><para>
			Override the default value for a given setting when the command-line
			option <filename>--setting</filename> or the environment variable
			<filename>$GOBO_CLI_SETTING</filename> did not set it. Several settings
			can be specified in this environment variable, separated by a comma or
			a space.
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>$GOBO_CLI_CAPABILITY</filename>
		</term>
		<listitem><para>
			Override capabilities as if they were specified with the command-line
			option <filename>--capability</filename>, or override their values
			if they are also specified with the command-line option.
			Several capabilities can be specified in this environment variable,
			separated by a comma or a space.
		</para></listitem>
	</varlistentry>
	<varlistentry>
		<term>
			<filename>$GOBO_DEFAULT_CAPABILITY</filename>
		</term>
		<listitem><para>
			Override the default value for a given capability when the command-line
			option <filename>--capability</filename> or the environment variable
			<filename>$GOBO_CLI_CAPABILITY</filename> did not set it. Several capabilities
			can be specified in this environment variable, separated by a comma or
			a space.
		</para></listitem>
	</varlistentry>
</variablelist>
</para>
</section>

<section><title>ECF files</title>
<para>
An ECF file contains the description of the Eiffel program to be compiled.
<projectname>gec</projectname> is able to read the same ECF files as
ISE Eiffel. So if you already have your ECF files, you can use them
without any modifications with <projectname>gec</projectname>.
</para>
<para>
If you are new to Eiffel and don't know what an ECF file is, please have
a look at this <link linkend="${library/tools}/ecf">description</link> from the
documentation of the <libraryname>Gobo Eiffel Tools Library</libraryname>
on which <projectname>gec</projectname> is based.
</para>
<para>
Note that for simple programs like a hello_world program, it is not necessary
to provide an ECF file. You can just let <projectname>gec</projectname> know
in which Eiffel file it can find the root class of the Eiffel system:
<blockquote>
	<filename>gec hello_world.e</filename>
</blockquote>
It will use the first creation procedure declared in the `create` clause
of the root class as root creation procedure. This will work fine provided
that all classes used in your simple program are part of one of the libraries
provided in the <link linkend="${root}/index"><projectname>Gobo
Eiffel Project</projectname></link>. 
You can give it a try using the <classname>HELLO_WORLD</classname> class provided in
<ulink url="../../../library/common/example/hello_world/hello_world.e">
<filename>$GOBO/library/common/example/hello_world/hello_world.e</filename></ulink>.
An ECF file will be needed when you want to use classes from other libraries
or if you want to override the default settings (e.g. console application, SCOOP mode).
</para>

</section>

<section><title>Back-end C compiler</title>
<para>
<projectname>gec</projectname> translates your Eiffel programs into C code.
This C code is then passed to a back-end C compiler to generate an executable.
By default <projectname>gec</projectname> uses the <ulink url="https://ziglang.org/">
Zig toolchain</ulink> which is included into the <projectname>Gobo Eiffel package</projectname>.
This section explains how to override this default if you want to use another
back-end C compiler or if you want to specify different C compilation options.
</para>
<para>
For each C compiler that you want to use as back-end C compiler, you should
provide a config file that should be located in
<filename class="directory">$GOBO/tool/gec/backend/c/config/</filename>. Here is an
example of such config file, <filename>gcc.cfg</filename> for the
<projectname>gcc</projectname> compiler:
<blockquote><programlisting>
cc: gcc $cflags $includes -c $c
link: gcc $lflags -lm -o $exe $objs $libs
obj: .o
exe:
cflags: 
lflags:
cflags_finalize: -O2
lflags_finalize:
</programlisting></blockquote>
This config file is used by <projectname>gec</projectname> to generate a
.bat file on Windows or a shell script on other platforms that will be
executed to compile the generated C code. The variable "cc" represents the
command-line template to turn C files into object files, and "link" to
turn object files into executables. The variables "$cflags", "$includes",
"$c" in the first template, and "$lflags", "$exe", "$objs" and "$libs"
in the second template will be replaced by appropriate values by 
<projectname>gec</projectname>. Next, the variables "obj" and "exe"
represent the file extensions for object files and executables on the
platform on which this C compiler will be invoked. And finally we find
C compilation and linker flags that should be used when
<projectname>gec</projectname> is invoked with or without the
command-line option <filename>--finalize</filename>. Note that Eiffel-style comments,
starting with "--", can be included in these config files.
</para>
<para>
There are several ways to instruct <projectname>gec</projectname> to
use a different back-end C compiler. You can either write the name
of the chosen C compiler in the file <filename>$GOBO/tool/gec/backend/c/config/default.cfg</filename>.
You might need to create this file if it does not exist yet. Alternatively
you can specify the name of the chosen C compiler in the environment
variable <filename>$GOBO_CC</filename>. Let's say that the name of your chosen C compiler
is <projectname>my_cc</projectname>. <projectname>gec</projectname> will
then look for the config file <filename>$GOBO/tool/gec/backend/c/config/my_cc.cfg</filename>.
</para>
</section>

</chapter>
