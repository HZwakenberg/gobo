variables:
  GOBO: '$CI_PROJECT_DIR'

#
# Build Gobo tools.
#

build_ge:
  stage: build_ge
  dependencies: []
  script:
    - Write-Host "Just to define the 'build_ge' stage name"
  rules:
    - when: never

linux_build_ge:
  stage: build_ge
  tags:
    - linux
  image:
    # See: https://stackoverflow.com/questions/44319313/how-do-i-use-powershell-with-gitlab-ci-in-gitlab-pages
    name: "mcr.microsoft.com/powershell:latest"
  dependencies: []
  script:
    - pwsh -f "$GOBO/.cicd/build_ge.ps1" gitlab
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $GOBO_CUSTOM_PIPELINE == null || $GOBO_CUSTOM_PIPELINE == "test_ise"
      when: on_success
  artifacts:
    when: always
    expire_in: 3 hours
    paths:
      - $GOBO/bin/
      - $GOBO/tool/gec/config/c/default.cfg

windows_build_ge:
  stage: build_ge
  tags:
    - shared-windows
    - windows
    - windows-1809
  dependencies: []
  script:
    - . "$GOBO/.cicd/build_ge.ps1" gitlab
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $GOBO_CUSTOM_PIPELINE == null
      when: on_success
  artifacts:
    when: always
    expire_in: 3 hours
    paths:
      - $GOBO/bin/
      - $GOBO/tool/gec/config/c/default.cfg

#
# Running tests with Gobo Eiffel.
#

test_ge:
  stage: test_ge
  dependencies: []
  script:
    - Write-Host "Just to define the 'test_ge' stage name"
  rules:
    - when: never

library_linux_test_ge:
  stage: test_ge
  tags:
    - linux
  image:
    # See: https://stackoverflow.com/questions/44319313/how-do-i-use-powershell-with-gitlab-ci-in-gitlab-pages
    name: "mcr.microsoft.com/powershell:latest"
  dependencies:
    - linux_build_ge
  script:
    - pwsh -f "$GOBO/.cicd/test_ge.ps1" gitlab ge library
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $GOBO_CUSTOM_PIPELINE == null
      when: on_success

tool_linux_test_ge:
  stage: test_ge
  tags:
    - linux
  dependencies:
    - linux_build_ge
  script:
    - source "$GOBO/.cicd/install_ge.sh" gitlab
    - cd $GOBO/tool
    - geant test_ge
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $GOBO_CUSTOM_PIPELINE == null
      when: on_success

library_windows_test_ge:
  stage: test_ge
  tags:
    - shared-windows
    - windows
    - windows-1809
  dependencies:
    - windows_build_ge
  script:
    - . "$GOBO/.cicd/install_ge.ps1" gitlab
    - cd "$env:GOBO/library"
    # The tests in `$GOBO\library\lexical` are failing in GitLab when using `geant test_ge`.
    - geant test_debug_ge
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $GOBO_CUSTOM_PIPELINE == null
      when: on_success

# We have `tool_no_gec_windows_test_ge` and `tool_gec_windows_test_ge`,
# instead of just `tool_windows_test_ge`, because it takes more than
# 1 hour to run this job and the job timeout on GitLab runners for Windows 
# is set to 1 hour (even though it is set to 2 hours for the project).

tool_no_gec_windows_test_ge:
  stage: test_ge
  tags:
    - shared-windows
    - windows
    - windows-1809
  dependencies:
    - windows_build_ge
  script:
    - . "$GOBO/.cicd/install_ge.ps1" gitlab
    - Remove-Item "$env:GOBO/tool/gec/test" -Force -Recurse
    - cd "$env:GOBO/tool"
    - geant test_ge
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $GOBO_CUSTOM_PIPELINE == null
      when: on_success

tool_gec_windows_test_ge:
  stage: test_ge
  tags:
    - shared-windows
    - windows
    - windows-1809
  dependencies:
    - windows_build_ge
  script:
    - . "$GOBO/.cicd/install_ge.ps1" gitlab
    - cd "$env:GOBO/tool/gec"
    - geant test_ge
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $GOBO_CUSTOM_PIPELINE == null
      when: on_success

#
# Running tests with ISE Eiffel.
#

test_ise:
  stage: test_ise
  dependencies: []
  script:
    - Write-Host "Just to define the 'test_ise' stage name"
  rules:
    - when: never

library_linux_test_ise:
  stage: test_ise
  tags:
    - linux
  dependencies:
    - linux_build_ge
  script:
    - source "$GOBO/.cicd/install_ge.sh" gitlab
    - source "$GOBO/.cicd/install_ise.sh" gitlab
    - cd $GOBO/library
    - geant test_debug_ise
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $GOBO_CUSTOM_PIPELINE == "test_ise"
      when: on_success
  timeout: 3 hours

tool_linux_test_ise:
  stage: test_ise
  tags:
    - linux
  dependencies:
    - linux_build_ge
  script:
    - source "$GOBO/.cicd/install_ge.sh" gitlab
    - source "$GOBO/.cicd/install_ise.sh" gitlab
    - cd $GOBO/tool
    - geant test_debug_ise
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $GOBO_CUSTOM_PIPELINE == "test_ise"
      when: on_success
  timeout: 3 hours

#
# Stages.
#

stages:
  - build_ge
  - test_ge
  - test_ise
