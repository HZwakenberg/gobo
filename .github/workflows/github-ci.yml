name: Continuous Integration

on: [push, pull_request]

jobs:

#
# Build Gobo tools.
#

  linux_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: build
        run: . "$env:GITHUB_WORKSPACE/.cicd/build_ge.ps1" github
        shell: pwsh
      - uses: actions/upload-artifact@v2
        with:
          name: gobo_bin_linux
          path: bin
          retention-days: 1
      - uses: actions/upload-artifact@v2
        with:
          name: gobo_c_config_linux
          path: tool/gec/config/c/default.cfg
          retention-days: 1

  macos_build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: build
        run: . "$env:GITHUB_WORKSPACE/.cicd/build_ge.ps1" github
        shell: pwsh
      - uses: actions/upload-artifact@v2
        with:
          name: gobo_bin_macos
          path: bin
          retention-days: 1
      - uses: actions/upload-artifact@v2
        with:
          name: gobo_c_config_macos
          path: tool/gec/config/c/default.cfg
          retention-days: 1

  windows_build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: build
        run: . "$env:GITHUB_WORKSPACE/.cicd/build_ge.ps1" github
      - uses: actions/upload-artifact@v2
        with:
          name: gobo_bin_windows
          path: bin
          retention-days: 1
      - uses: actions/upload-artifact@v2
        with:
          name: gobo_c_config_windows
          path: tool/gec/config/c/default.cfg
          retention-days: 1

#
# Running tests.
#
  
  linux_test:
    runs-on: ubuntu-latest
    needs: linux_build
    strategy:
      matrix:
        eiffel_compiler: [ge, debug_ge, ise, debug_ise]
        system_under_test: [library, tool]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: gobo_bin_linux
          path: bin
      - uses: actions/download-artifact@v2
        with:
          name: gobo_c_config_linux
          path: tool/gec/config/c
      - name: test
        run: |
          . "$env:GITHUB_WORKSPACE/.cicd/install_ge.ps1" github
          if (("${{ matrix.eiffel_compiler }}").EndsWith("ise")) {
            . "$env:GOBO/.cicd/install_ise.ps1" github
          }
          cd $env:GOBO/${{ matrix.system_under_test }}
          geant test_${{ matrix.eiffel_compiler }}
        shell: pwsh

  macos_test:
    runs-on: macos-latest
    needs: macos_build
    strategy:
      matrix:
        eiffel_compiler: [ge, debug_ge, ise, debug_ise]
        system_under_test: [library, tool]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: gobo_bin_macos
          path: bin
      - uses: actions/download-artifact@v2
        with:
          name: gobo_c_config_macos
          path: tool/gec/config/c
      - name: test
        run: |
          . "$env:GITHUB_WORKSPACE/.cicd/install_ge.ps1" github
          if (("${{ matrix.eiffel_compiler }}").EndsWith("ise")) {
            . "$env:GOBO/.cicd/install_ise.ps1" github
          }
          cd $env:GOBO/${{ matrix.system_under_test }}
          geant test_${{ matrix.eiffel_compiler }}
        shell: pwsh

  windows_test:
    runs-on: windows-latest
    needs: windows_build
    strategy:
      matrix:
# The test for `library/xslt` crashes with a run-time panic when using 
# ISE Eiffel in workbench mode in GitHub Actions pipeline:
#
# xslt: PANIC: Unexpected harmful signal (Segmentation violation) ...
#
# xslt: system execution failed.
# Following is the set of recorded exceptions.
# NB: The raised panic may have induced completely inconsistent information:
#
# -------------------------------------------------------------------------------
# Class / Object      Routine                Nature of exception           Effect
# -------------------------------------------------------------------------------
# RUN-TIME            root's set-up          Unexpected harmful signal (Segmentation violation):
# <0000000000000000>                         Eiffel run-time panic.        Bye
# -------------------------------------------------------------------------------
#
# So `debug_ise` is excluded below.
        eiffel_compiler: [ge, debug_ge, ise]
        system_under_test: [library, tool]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: gobo_bin_windows
          path: bin
      - uses: actions/download-artifact@v2
        with:
          name: gobo_c_config_windows
          path: tool/gec/config/c
      - name: test
        run: |
          . "$env:GITHUB_WORKSPACE/.cicd/install_ge.ps1" github
          if (("${{ matrix.eiffel_compiler }}").EndsWith("ise")) {
            . "$env:GOBO/.cicd/install_ise.ps1" github
          }
          cd $env:GOBO/${{ matrix.system_under_test }}
          geant test_${{ matrix.eiffel_compiler }}
